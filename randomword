#!/usr/bin/perl
use strict;
use Getopt::Std;

my $usage = <<_EOF_;
usage: randomword [options]
       -b <number>  %chance of terminating sentence with !
       -c <number>  Minimum words between commas
       -C <number>  Maximum words between commas
       -D <number>  %chance of comma after word
       -d <file>    Dictionary file
       -e           English word length frequency
       -l <number>  Number of lines (if set, -n is ignored)
       -m <number>  Minimum word length
       -M <number>  Maximum word length
       -n <number>  Number of words
       -p           Add punctuation
       -P <number>  Same as "-l<number> -w\$COLUMNS -ep"
       -s <number>  Minimum words in sentence
       -S <number>  Maximum words in sentence
       -q <number>  %chance of terminating sentence with ?
       -w <number>  Format as paragraph with given width 
       -. <number>  %chance of ending sentence after each word
_EOF_

# Based on extensive linguistic research {d}

exit (main() ? 0 : 1);

sub main {
    my %opt;
    if (not getopts('b:c:C:d:D:el:m:M:n:pP:q:s:uw:.:', \%opt) or @ARGV > 0) {
        print $usage;
        return 0;
    }
    my $exclam_pct    = ($opt{b} or 2);
    my $wpc_min       = ($opt{c} or 4);
    my $wpc_max       = ($opt{C} or 25);
    my $wpc_pct       = ($opt{D} or 20);
    my $word_file     = ($opt{d} or '/usr/share/dict/words');
    my $english       = ($opt{P} or $opt{e});
    my $num_lines     = ($opt{P} or $opt{l} or -1);
    my $wordlen_min   = ($opt{m} or 2);
    my $wordlen_max   = ($opt{M} or 999);
    my $num_words     = (($num_lines > 0) ? -1 : ($opt{n} or 1));
    my $punc          = ($opt{P} or $opt{p});
    my $quest_pct     = ($opt{q} or 5);
    my $endsent_pct   = ($opt{'.'} or 15);
    my $sent_min      = ($opt{s} or 4);
    my $sent_max      = ($opt{S} or 20);
    my $keep_upper    = $opt{u};
    my $para_width    = ($opt{w} or ($opt{P} ? $ENV{COLUMNS}-1 : 0));

    my $words = all_words($word_file, $wordlen_min, $wordlen_max, $keep_upper);
    my $line = '';
    my $sent = 0; # words in current sentence (unrelated to lines)
    my $wsc = 0; # words since last comma
    my $cap = $punc; # capitalize next word
    my $printed_lines = 0;
    for (my $gen_words = 0; $gen_words < $num_words or $num_words == -1; ++$gen_words) {
        my $word = random_word($words, $english);
        if ($cap) {
            $word = ucfirst $word;
            $cap = 0;
        }
        my $sep = (length($line) > 0) ? ' ' : '';
        if (length($line) + length($sep) + length($word) > $para_width) {
            if ($line) {
                ++$printed_lines;
                my $done = ($num_lines != -1 and $printed_lines >= $num_lines);
                $line .= '.' if $done and substr($line,-1) =~ /[\w]/;
                print $line, "\n";
                if ($done) {
                    $line = '';
                    last;
                }
            }
            $line = $word;
        } else {
            $line .= $sep if $line;
            $line .= $word;
        }
        if ($punc) {
            if (++$wsc >= $wpc_max or ($wsc >= $wpc_min and rand(100) < $wpc_pct)) {
                $line .= ',';
                $wsc = 0;
            } elsif (++$sent >= $sent_max or ($sent >= $sent_min and rand(100) < $endsent_pct)) {
                my $pct = rand(100);
                $line .= ($pct < $quest_pct) ? '?' : ($pct < $quest_pct+$exclam_pct) ? '!' : '.';
                $sent = 0;
                $cap = 1;
            }
        }
    }
    if ($line) {
        print $line;
        print "." if $punc;
        print "\n";
    }
    return 1;
}
sub random_word {
    my ($words, $english) = @_;
    my $word;
    if ($english) {
        my $len = english_len();
        my $tbl = ${$words->{lwords}}{$len};
        $word = $$tbl[int rand @$tbl];
        return $word if $word;
    }
    my $tbl = $words->{words};
    $word = $$tbl[int rand @$tbl];
    return $word;
}
sub english_len {
    my %freq = (
        1 => 3,
        2 => 17,
        3 => 25,
        4 => 17,
        5 => 10,
        6 => 10,
        7 => 8,
        8 => 5,
        9 => 3,
        10 => 2,
    );
    my $pct = rand(100);
    foreach my $len (keys %freq) {
        my $f = $freq{$len};
        return $len if $pct < $f;
        $pct -= $f;
    }
    return 3;
}
sub all_words {
    my ($word_file, $wordlen_min, $wordlen_max, $keep_upper) = @_;
    my $wf;
    open $wf, $word_file or die "cannot open $word_file\n";
    my @words;
    my %lwords;
    while (<$wf>) {
        chomp;
        my $len = length $_;
        next if /^[A-Z]/ and not $keep_upper;
        if ($len >= $wordlen_min and $len <= $wordlen_max) {
            push @words, $_;
            if (not $lwords{$len}) { $lwords{$len} = []; }
            push @{$lwords{$len}}, $_;
        }
    }
    close $wf;
    return { "words" => \@words, "lwords" => \%lwords };
}
